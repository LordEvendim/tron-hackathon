/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MiranCoreInterface extends ethers.utils.Interface {
  functions: {
    "BASE_AUCTION_DURATION()": FunctionFragment;
    "BID_AUCTION_DURATION()": FunctionFragment;
    "MIN_REQUIRED_PRICE()": FunctionFragment;
    "auctionById(bytes32)": FunctionFragment;
    "auctionsIds(uint256)": FunctionFragment;
    "balance(address)": FunctionFragment;
    "bid(address,uint256,uint256)": FunctionFragment;
    "claimAuction(address,uint256)": FunctionFragment;
    "createNewAuction(address,uint256,uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "getAllAuctions()": FunctionFragment;
    "getAuctionId(address,uint256)": FunctionFragment;
    "getAuctionsLength()": FunctionFragment;
    "getUserTokenLength()": FunctionFragment;
    "getUserTokens()": FunctionFragment;
    "isTokenLocked(address,uint256)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "userAuction(address)": FunctionFragment;
    "userTokens(address,uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawToken(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BASE_AUCTION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BID_AUCTION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REQUIRED_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionById",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "auctionsIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAuction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewAuction",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllAuctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenLocked",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "userAuction", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_AUCTION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BID_AUCTION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REQUIRED_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionsIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "Bid(address,uint256,address,uint256,uint256)": EventFragment;
    "Claimed(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
}

export type BidEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber] & {
    collectionAddress: string;
    tokenId: BigNumber;
    bidder: string;
    price: BigNumber;
    endingTime: BigNumber;
  }
>;

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    collectionAddress: string;
    tokenId: BigNumber;
    bidder: string;
    price: BigNumber;
  }
>;

export class MiranCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MiranCoreInterface;

  functions: {
    BASE_AUCTION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    BID_AUCTION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_REQUIRED_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string
      ] & {
        index: BigNumber;
        creationTime: BigNumber;
        endingTime: BigNumber;
        creator: string;
        collectionAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
        bidder: string;
      }
    >;

    auctionsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    balance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bid(
      collectionAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAuction(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewAuction(
      collectionAddress: string,
      tokenId: BigNumberish,
      startingPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllAuctions(
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string
        ] & {
          index: BigNumber;
          creationTime: BigNumber;
          endingTime: BigNumber;
          creator: string;
          collectionAddress: string;
          tokenId: BigNumber;
          price: BigNumber;
          bidder: string;
        })[]
      ]
    >;

    getAuctionId(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAuctionsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserTokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserTokens(
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, string, BigNumber] & {
          index: BigNumber;
          collectionAddress: string;
          tokenId: BigNumber;
        })[]
      ]
    >;

    isTokenLocked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAuction(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    userTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BASE_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  BID_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_REQUIRED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  auctionById(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string
    ] & {
      index: BigNumber;
      creationTime: BigNumber;
      endingTime: BigNumber;
      creator: string;
      collectionAddress: string;
      tokenId: BigNumber;
      price: BigNumber;
      bidder: string;
    }
  >;

  auctionsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bid(
    collectionAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAuction(
    collectionAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewAuction(
    collectionAddress: string,
    tokenId: BigNumberish,
    startingPrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllAuctions(
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string
    ] & {
      index: BigNumber;
      creationTime: BigNumber;
      endingTime: BigNumber;
      creator: string;
      collectionAddress: string;
      tokenId: BigNumber;
      price: BigNumber;
      bidder: string;
    })[]
  >;

  getAuctionId(
    collectionAddress: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAuctionsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getUserTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

  getUserTokens(
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, string, BigNumber] & {
      index: BigNumber;
      collectionAddress: string;
      tokenId: BigNumber;
    })[]
  >;

  isTokenLocked(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAuction(arg0: string, overrides?: CallOverrides): Promise<string>;

  userTokens(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    collectionAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASE_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    BID_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REQUIRED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    auctionById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string
      ] & {
        index: BigNumber;
        creationTime: BigNumber;
        endingTime: BigNumber;
        creator: string;
        collectionAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
        bidder: string;
      }
    >;

    auctionsIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      collectionAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAuction(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewAuction(
      collectionAddress: string,
      tokenId: BigNumberish,
      startingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    deposit(overrides?: CallOverrides): Promise<void>;

    getAllAuctions(
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string
      ] & {
        index: BigNumber;
        creationTime: BigNumber;
        endingTime: BigNumber;
        creator: string;
        collectionAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
        bidder: string;
      })[]
    >;

    getAuctionId(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAuctionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokens(
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, string, BigNumber] & {
        index: BigNumber;
        collectionAddress: string;
        tokenId: BigNumber;
      })[]
    >;

    isTokenLocked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    userAuction(arg0: string, overrides?: CallOverrides): Promise<string>;

    userTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Bid(address,uint256,address,uint256,uint256)"(
      collectionAddress?: null,
      tokenId?: null,
      bidder?: null,
      price?: null,
      endingTime?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        collectionAddress: string;
        tokenId: BigNumber;
        bidder: string;
        price: BigNumber;
        endingTime: BigNumber;
      }
    >;

    Bid(
      collectionAddress?: null,
      tokenId?: null,
      bidder?: null,
      price?: null,
      endingTime?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber, BigNumber],
      {
        collectionAddress: string;
        tokenId: BigNumber;
        bidder: string;
        price: BigNumber;
        endingTime: BigNumber;
      }
    >;

    "Claimed(address,uint256,address,uint256)"(
      collectionAddress?: null,
      tokenId?: null,
      bidder?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        collectionAddress: string;
        tokenId: BigNumber;
        bidder: string;
        price: BigNumber;
      }
    >;

    Claimed(
      collectionAddress?: null,
      tokenId?: null,
      bidder?: null,
      price?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      {
        collectionAddress: string;
        tokenId: BigNumber;
        bidder: string;
        price: BigNumber;
      }
    >;
  };

  estimateGas: {
    BASE_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    BID_AUCTION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_REQUIRED_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    auctionById(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    auctionsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      collectionAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAuction(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewAuction(
      collectionAddress: string,
      tokenId: BigNumberish,
      startingPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllAuctions(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionId(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuctionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTokens(overrides?: CallOverrides): Promise<BigNumber>;

    isTokenLocked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAuction(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASE_AUCTION_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BID_AUCTION_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_REQUIRED_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionsIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      collectionAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAuction(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewAuction(
      collectionAddress: string,
      tokenId: BigNumberish,
      startingPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllAuctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuctionId(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuctionsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserTokenLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTokenLocked(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAuction(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTokens(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      collectionAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
